# source: https://iquilezles.org/articles/palettes/
Wish the GPU compiles function "palette" {{float t vec3 a vec3 b vec3 c vec3 d} vec3 {
    return a + b*cos( 6.28318*(c*t+d) );
}}

# Wish the GPU compiles function "metaball" {{float d} float {
#     return 1.0 / (d * d);
# }}

Wish the GPU compiles function "circle" {{vec2 _st float _radius} float {
    vec2 dist = _st-vec2(0.5);
	return 1. - smoothstep(_radius-(_radius*0.01),
                         _radius+(_radius*0.01),
                         dot(dist,dist)*4.0);
}}

Wish the GPU compiles pipeline "$this's metaballShader" {
  { vec2 p0 vec2 p1 vec2 p2 vec2 p3 float u_time vec2 resolution} {
    vec2 vertices[4] = vec2[4](p1, p0, p2, p3);
    return vertices[gl_VertexIndex];
  } {fn palette fn circle} {
    vec3 colorA = palette(gl_FragCoord.x, vec3(0.5,0.5,0.5),vec3(sin(u_time),0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,sin(u_time),0.20));
    vec3 colorB = vec3(1.000,0.833,0.224);
    vec3 mixed = colorA * (1 - colorB) + colorB * u_time;

    mixed *= circle(gl_FragCoord.xy, 0.5);

    return vec4(mixed, 1);
  }
}

When the clock time is /t/ {
    When $this has region /r/ { 
        set r' [region move $r down 100%]
        Wish the GPU draws pipeline "$this's metaballShader" with arguments [list {*}[region vertices ${r'}] [fmod $t 2] [list $Display::WIDTH $Display::HEIGHT]] layer 1 
    }
}

Wish $this is outlined white

return
###### square:

Wish the GPU compiles pipeline "$this's metaballShader" {
  { vec2 p0 vec2 p1 vec2 p2 vec2 p3 float u_time vec2 u_resolution} {
    vec2 vertices[4] = vec2[4](p1, p0, p2, p3);

    return vertices[gl_VertexIndex];
  } {fn palette}  {
    vec3 colorA = vec3(0.149,0.141,0.912);
    vec3 colorB = vec3(1.000,0.833,0.224);
    vec3 mixed = colorA * (1 - colorB) + colorB * u_time;

    return vec4(mixed, 1);
  }
}


Wish $this is outlined white

When the clock time is /t/ {
    When $this has region /r/ { 
        set r' [region move $r down 100%]
        Wish the GPU draws pipeline "$this's triangle" with arguments [list {*}[region vertices ${r'}] [fmod $t 2] [list $Display::WIDTH $Display::HEIGHT]] layer 1 
    }
}

###### triangle:
# Wish the GPU compiles pipeline "$this's metaballShader_triangle" {
#     {vec2 p0 vec2 p1 vec2 p2 float u_time vec2 u_resolution} {
#         vec2 vertices[4] = vec2[4](p0, p1, p2, p0);
#         return vertices[gl_VertexIndex];
#     } {fn palette} {
#         vec3 gradientColor = palette(gl_FragCoord.x, vec3(0.5,0.5,0.5),vec3(sin(u_time),0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,sin(u_time),0.20));
#         return vec4(gradientColor, 1.0);
#     }
# }

Wish $this is outlined blue
When $this has region /r/ & the clock time is /t/ {
    set r' [region move $r down 100%]
    Wish the GPU draws pipeline "$this's metaballShader" with arguments [list {*}[lrange [region vertices ${r'}] 0 2] [fmod $t 16384] [list $Display::WIDTH $Display::HEIGHT]]
}