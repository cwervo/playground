#################
# Button that claims its:
# - colorHash is a random number
#################
Claim $this is a colorHashButton

When /someone/ claims /thing/ is a colorHashButton & /thing/ has region /r/ & the clock time is /t/ {
    # Not explicitly useful right now but would be cool to eventually have this claim (at root)
    # be able to change the template of the print hmmmmm
    Claim $thing is a button
    # Claim $thing has colorHash [rand]
    # Instead of just rand we can smooth out time to make it a prettier transition
    Claim $thing has colorHash [expr {0.5 + sin($t * 0.25)}]
}

Wish $this is titled btn
Wish $this is outlined magenta

#################
# Main program that responds to blobs
################
Wish the GPU compiles function "palette" {{float t vec3 a vec3 b vec3 c vec3 d} vec3 {
    return a + b*cos( 6.28318*(c*t+d) );
}}

Wish the GPU compiles pipeline "$this's triangle" {
  { vec2 p0 vec2 p1 vec2 p2 vec2 p3 float u_time vec2 u_resolution float colorHash} {
    vec2 vertices[4] = vec2[4](p1, p0, p2, p3);
    return vertices[gl_VertexIndex];
  } {fn palette} {
   vec2 st = gl_FragCoord.xy/u_resolution;

   float y = pow(st.x,5.0);

   vec3 color = vec3(y);

  # TODO: Make this is a fanned out circle or something instead of just the whole
  #       screen space shader ...
   float pct = smoothstep( y-0.02, y, st.y) -
          smoothstep( y, y+0.02, st.y);
   color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);

   color *= palette(colorHash, vec3(0.5), vec3(0.5), vec3(1.0), vec3(0.0, 0.10, 0.20));

   return vec4(color,1.0);
  }
}

When the clock time is /t/ {
  When $this has region /r/ { 
    # 1. Set up the basic shader variables
    set r' [region move $r right 110%]

    # 2. For each shaderBlob, update base shader
    #TODO: Switch this to use collected matches and loop through to accumulate the uniform updates
    When /someone/ claims /thing/ is a shaderBlob {
       # change relevant shader variables ....
    }

    # 3. Compile shader
    When /btn/ has colorHash /colorHash/ {
      Wish $this is labelled "has ch"
      Wish the GPU draws pipeline "$this's triangle" with arguments [list\
        {*}[region vertices ${r'}]\
        [fmod $t 16384]\
        [list [region width $r] [region height $r]]\
        $colorHash \
      ]
### 

        # {*}[region vertices ${r'}]\ ;# vertices
        # [fmod $t 16384]\ ;# u_time
        # [list [region width $r] [region height $r]]\ ;# u_resolution
        # $colorHash \ ;# colorHash

    }
    # Default in case there's no button being pressed
    When /nobody/ has colorHash /colorHash/ {
     Wish $this is labelled "NOBODY has ch"
      Wish the GPU draws pipeline "$this's triangle" with arguments [list\
        {*}[region vertices ${r'}]\
        [fmod $t 16384]\
        [list [region width $r] [region height $r]]\
        0.5 \
      ]
    }
  }
}


Wish $this is titled "main shader"
Wish $this is outlined green