#################
# Button that claims its:
# - position is [x y] (centroid of the region)
# - size is [width height]
#################

Claim $this is a shaderBlob

When /someone/ claims /thing/ is a shaderBlob & /thing/ has region /r/ {
    # Not explicitly useful right now but would be cool to eventually have this claim (at root)
    # be able to change the template of the print hmmmmm
    Claim $thing is a button
    Claim $thing has position [region centroid $r]
    Claim $thing has size [list [region width $r] [region height $r]]
}

#################
# Main program that responds to blobs
################

Wish the GPU compiles pipeline "$this's triangle" {
  { vec2 p0 vec2 p1 vec2 p2 vec2 p3 float u_time vec2 u_resolution} {
    vec2 vertices[4] = vec2[4](p1, p0, p2, p3);
    return vertices[gl_VertexIndex];
  } {
   vec2 st = gl_FragCoord.xy/u_resolution;

   float y = pow(st.x,5.0);

   vec3 color = vec3(y);

   float pct = smoothstep( y-0.02, y, st.y) -
          smoothstep( y, y+0.02, st.y);
   color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);

   return vec4(color,1.0);
  }
}

When the clock time is /t/ {
  When $this has region /r/ { 
    # 1. Set up the basic shader variables
    set r' [region move $r right 110%]

    # 2. For each shaderBlob, update base shader
    #TODO: Switch this to use collected matches and loop through to accumulate the uniform updates
    When /someone/ claims /thing/ is a shaderBlob {
       # change relevant shader variables ....
    }

    # 3. Compile shader
    Wish the GPU draws pipeline "$this's triangle" with arguments [list {*}[region vertices ${r'}] [fmod $t 16384] [list [region width $r] [region height $r]]]
  }
}
