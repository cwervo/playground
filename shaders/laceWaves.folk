Wish $this is outlined white

# Translated from: https://www.shadertoy.com/view/4td3zj

Wish the GPU compiles pipeline "$this's triangle" {
  { vec2 _p0 vec2 _p1 vec2 _p2 vec2 _p3 float u_time vec2 u_resolution} {

    vec2 vertices[4] = vec2[4](_p1, _p0, _p2, _p3);
    return vertices[gl_VertexIndex];
  } {fn circleFromCenter fn computeWaves} {
    vec2 true_uv = gl_FragCoord.st/u_resolution;
    // gl_FragColor = (computeWaves(true_uv, leftHandPos) + computeWaves(true_uv, rightHandPos)) * vec4(vec3(0.6), 1.0);
    return (computeWaves(true_uv, vec3(true_uv, 100. * sin(u_time * 4.))) + computeWaves(true_uv, vec3(true_uv * sin(u_time), 0.))) * vec4(vec3(1.6), 1.0);
  }
}

When the clock time is /t/ {
  When $this has region /r/ {
    set r' [region move $r up 110%]

    Wish the GPU compiles function "circleFromCenter" {{vec2 uv float radius} float {
        return distance(uv, vec2(0.5)) * radius;
    }}

    Wish the GPU compiles function "computeWaves" {{vec2 true_uv vec3 handPosition} vec4 {
        vec2 center = vec2(0.5,0.5);
        float speed = 0.05;
        float minHandValue = 0.5;
        bool invert = false;
        bool symmetricRipples = false;
        bool bColorize = true;

        // Scale the cofficient here by 10 to get wild jumps in movement
        vec2 handPosModifier = (handPosition.xz * 0.001);
        // flip down y-axis
        handPosModifier.x *= -1.0;
        vec2 uv = true_uv + handPosModifier;

        vec3 texcol;
        float x = (center.x-uv.x);
        float y = (center.y-uv.y);

        float r = -(x*x + y*y);
        if (symmetricRipples) {
            r = -sqrt(x*x + y*y);
        }

        // Smaller == less intense
        float patternIntensity = 0.05;
        /* float patternIntensity = 1.5; */
        float waveDebug = (handPosition.y * patternIntensity) + 5.0;
        /* if (true_uv.x > 0.5) waveDebug *= 0.3; */
        /* float z = uv.x + 0.5*sin((r*waveDebug+ args.u_time*speed)/0.013); */
        float z = 0.1 + 0.5*sin((r*waveDebug+ args.u_time*speed)/0.013);

        texcol.x = z;
        texcol.y = z;
        texcol.z = z;

        /* gl_FragColor = vec4(vec3(1.0, 1.0, 1.0) * texcol * , 0.5); */
        float alpha = 1.0;
        vec3 color = texcol;
        if (invert) {
            color = vec3(1.0) - color;
        }
        if (bColorize) {
            color *= vec4(uv,0.5+0.5*sin(args.u_time * 0.1),1.0).rgb;
        }

        if (false /* add weird depth thing */) {
            color *= vec3(mod(args.u_time * 0.001, true_uv.x));
        }
        alpha *= 1.0 - circleFromCenter(true_uv, 2.0);
        /* color *= -1.0 - circleFromCenter(true_uv, 2.0); */
        /* alpha *= true_uv.y * 2.0; */
        /* color *= 1.0 - circleFromCenter(true_uv, 1.0); */
        return vec4(color, alpha);
            
        }}

    Wish the GPU draws pipeline "$this's triangle" with arguments [list {*}[region vertices ${r'}] [fmod $t 16384] [list [region width $r] [region height $r]]]
  }
}
